<?xml version="1.0" encoding="UTF-8"?>
<document xmlns="http://maven.apache.org/XDOC/2.0"
			  xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
			  xsi:schemaLocation="http://maven.apache.org/XDOC/2.0 http://maven.apache.org/xsd/xdoc-2.0.xsd">

	<properties>
		<title>About</title>
		<author email="info@funfried.de">Fabian Bahle</author>
	</properties>

	<body>
		<section name="What is External Java Code Formatters for NetBeans?">
			<p>
				(Formerly known as Eclipse Java Code Formatter for NetBeans)
			</p>
			<p>
				This is the project page of the <a href="https://netbeans.apache.org">NetBeans IDE</a> plugin
				<i>External Java Code Formatters for NetBeans</i>. This plugin helps you to apply to a common
				code style in a team of Eclipse JDT, IntelliJ and NetBeans IDE users. Either you can use the
				<a href="https://github.com/google/google-java-format">Google Code Formatter</a> or the
				<a href="https://help.eclipse.org/kepler/index.jsp?topic=%2Forg.eclipse.jdt.doc.isv%2Fguide%2Fjdt_api_codeformatter.htm">
					Eclipse Java Code Formatter
				</a> inside the NetBeans IDE, depending on whatever your co-workers use. The original
				formatting engine of Eclipse and the Google Code Formatter are embedded and allow you to format
				the source code the same way as e.g. your Eclipse co-workers do.
			</p>
			<subsection name="Note">
				<p>
					Please note that this plugin only provides support for formatting. Eclipse users may miss
					the application of save-actions like "adding @Override annotations" or "member sort order".
					Such AST-based transformations are not provided by this plugin.
				</p>
			</subsection>
			<subsection name="Compatibility">
				<p>
					Compatible with NetBeans 8.2+ and JDK8+.
				</p>
			</subsection>
		</section>
		<section name="Current features">
			<ul>
				<li>Global configuration and project specific configuration</li>
				<li>On save action (Disabled by default)</li>
				<li>Shows the used formatter in a notification (Disabled by default)</li>
				<li>Supports Eclipse formatter profiles (since 1.6)</li>
				<li>Supports format of selected text (since 1.7)</li>
				<li>Preserve breakpoints (experimental) (since 1.8)</li>
				<li>Code templates for @formatter:on/off (since 1.9)</li>
				<li>Supports <a href="https://code.google.com/a/eclipselabs.org/p/workspacemechanic/">Workspace Mechanic</a> configuration file (since 1.10)</li>
				<li>Support configuration from .settings/org.eclipse.jdt.core.prefs (absolute and relative paths) (since 1.10)</li>
				<li>On save action: Introduced option for formatting only the changed lines (since 1.10)</li>
				<li>Support configuration of linefeed (since 1.10)</li>
				<li>Support for macro invocation (since 1.12)</li>
				<li>Support for guarded documents (documents that are created by the NetBeans GUI builder, guarded blocks are skipped of course, but everything in between can be formatted) (since 1.13)</li>
				<li>Support for Google code formatter (since 1.13)</li>
			</ul>
		</section>
		<section name="History of this plugin">
			<ul>
				<li>
					The original idea is based on
					<a href="http://epochcoder.blogspot.com/2013/08/import-eclipse-formatter-into-netbeans.html">
						http://epochcoder.blogspot.com/2013/08/import-eclipse-formatter-into-netbeans.html
					</a>
					from <a href="https://github.com/epochcoder">Willie Scholtz</a>
				</li>
				<li>
					<a href="https://github.com/geertjanw">Geertjan Wielenga</a> made further investigations on
					that idea and
					<a href="https://blogs.oracle.com/geertjan/entry/eclipse_formatter_for_netbeans_ide">
						put everything together</a> to create a first NetBeans Plugin out of this idea
					</li>
				<li>
					This was then <a href="https://github.com/markiewb/eclipsecodeformatter_for_netbeans/">forked</a>
					by <a href="https://github.com/markiewb">Benno Markiewicz</a>
				</li>
				<li>
					<a href="https://github.com/m^arkiewb">Benno Markiewicz</a> stopped the development on the
					plugin and so <a href="https://github.com/geertjanw">Geertjan Wielenga</a> forked it again and
					was looking for someone who wanted to take it over
				</li>
				<li>
					I think I used this plugin since I use NetBeans, because in every company I was so far, I had
					exactly this circumstance that the formatting configuration was always there for Eclipse, but
					not for NetBeans. And because I prefer NetBeans over Eclipse I had to find a way to use
					NetBeans but the code style configuration from Eclipse. I'm happy that I can give back
					something to the community now by continuing the development of this plugin.
				</li>
			</ul>
		</section>
	</body>
</document>
