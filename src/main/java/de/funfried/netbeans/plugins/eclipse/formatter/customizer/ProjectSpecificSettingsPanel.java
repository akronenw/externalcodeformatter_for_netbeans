/*
 * Copyright (c) 2013 markiewb.
 * All rights reserved. This program and the accompanying materials
 * are made available under the terms of the Eclipse Public License v2.0
 * which accompanies this distribution, and is available at
 * http://www.eclipse.org/legal/epl-v20.html
 * Contributors:
 * markiewb - initial API and implementation and/or initial documentation
 */
package de.funfried.netbeans.plugins.eclipse.formatter.customizer;

import static de.funfried.netbeans.plugins.eclipse.formatter.options.Preferences.USE_PROJECT_SETTINGS;

import java.awt.BorderLayout;
import java.util.ArrayList;
import java.util.Collection;
import java.util.prefs.Preferences;

import javax.swing.event.ChangeListener;

import de.funfried.netbeans.plugins.eclipse.formatter.options.EclipseFormatterPanel;

import org.netbeans.api.options.OptionsDisplayer;

public class ProjectSpecificSettingsPanel extends javax.swing.JPanel implements VerifiableConfigPanel {
	private static final long serialVersionUID = 1L;

	private final Preferences projectPreferences;

	private final EclipseFormatterPanel innerComponent;

	ProjectSpecificSettingsPanel(EclipseFormatterPanel innerComponent, Preferences projectPreferences) {
		initComponents();
		this.innerComponent = innerComponent;
		this.projectPreferences = projectPreferences;

		innerPanel.setLayout(new BorderLayout());
		innerPanel.add(this.innerComponent, BorderLayout.CENTER);
	}

	/**
	 * This method is called from within the constructor to initialize the form. WARNING: Do NOT modify this code. The content of this method is always regenerated by the Form Editor.
	 */
	@SuppressWarnings("unchecked")
	// <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
	private void initComponents() {

		innerPanel = new javax.swing.JPanel();
		jPanel1 = new javax.swing.JPanel();
		cbOverrideGlobalSettings = new javax.swing.JCheckBox();
		lblJumpToGlobalOptions = new javax.swing.JLabel();

		setLayout(new java.awt.BorderLayout());
		add(innerPanel, java.awt.BorderLayout.CENTER);

		jPanel1.setLayout(new java.awt.BorderLayout());

		org.openide.awt.Mnemonics.setLocalizedText(cbOverrideGlobalSettings,
				org.openide.util.NbBundle.getMessage(ProjectSpecificSettingsPanel.class, "ProjectSpecificSettingsPanel.cbOverrideGlobalSettings.text")); // NOI18N
		cbOverrideGlobalSettings.addActionListener(new java.awt.event.ActionListener() {
			public void actionPerformed(java.awt.event.ActionEvent evt) {
				cbOverrideGlobalSettingsActionPerformed(evt);
			}
		});
		jPanel1.add(cbOverrideGlobalSettings, java.awt.BorderLayout.WEST);

		lblJumpToGlobalOptions.setHorizontalAlignment(javax.swing.SwingConstants.RIGHT);
		org.openide.awt.Mnemonics.setLocalizedText(lblJumpToGlobalOptions,
				org.openide.util.NbBundle.getMessage(ProjectSpecificSettingsPanel.class, "ProjectSpecificSettingsPanel.lblJumpToGlobalOptions.text")); // NOI18N
		lblJumpToGlobalOptions.addMouseListener(new java.awt.event.MouseAdapter() {
			public void mouseClicked(java.awt.event.MouseEvent evt) {
				lblJumpToGlobalOptionsMouseClicked(evt);
			}
		});
		jPanel1.add(lblJumpToGlobalOptions, java.awt.BorderLayout.CENTER);

		add(jPanel1, java.awt.BorderLayout.NORTH);
	}// </editor-fold>//GEN-END:initComponents

	private void cbOverrideGlobalSettingsActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_cbOverrideGlobalSettingsActionPerformed
		innerPanel.setVisible(cbOverrideGlobalSettings.isSelected());
		fireChangedListener();
	}//GEN-LAST:event_cbOverrideGlobalSettingsActionPerformed

	private void lblJumpToGlobalOptionsMouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_lblJumpToGlobalOptionsMouseClicked
		OptionsDisplayer.getDefault().open("Java" + "/de.funfried.netbeans.plugins.eclipse.formatter.options");
	}//GEN-LAST:event_lblJumpToGlobalOptionsMouseClicked

	// Variables declaration - do not modify//GEN-BEGIN:variables
	private javax.swing.JCheckBox cbOverrideGlobalSettings;

	private javax.swing.JPanel innerPanel;

	private javax.swing.JPanel jPanel1;

	private javax.swing.JLabel lblJumpToGlobalOptions;
	// End of variables declaration//GEN-END:variables

	@Override
	public void load() {
		boolean useProjectSettings = projectPreferences.getBoolean(USE_PROJECT_SETTINGS, false);
		cbOverrideGlobalSettings.setSelected(useProjectSettings);
		innerPanel.setVisible(useProjectSettings);
	}

	@Override
	public void store() {
		projectPreferences.putBoolean(USE_PROJECT_SETTINGS, cbOverrideGlobalSettings.isSelected());
	}

	private transient final Collection<ChangeListener> changeListeners = new ArrayList<>();

	public void addChangeListener(ChangeListener listener) {
		changeListeners.add(listener);
	}

	private void fireChangedListener() {
		for (ChangeListener changeListener : changeListeners) {
			changeListener.stateChanged(null);
		}
	}

	@Override
	public boolean holdsValidConfig() {
		boolean result = true;
		if (cbOverrideGlobalSettings.isSelected()) {
			return innerComponent.holdsValidConfig();
		}
		return result;
	}

}
