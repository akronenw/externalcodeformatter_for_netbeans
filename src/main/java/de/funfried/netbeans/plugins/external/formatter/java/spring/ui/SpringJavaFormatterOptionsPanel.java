/*
 * Copyright (c) 2020 bahlef.
 * All rights reserved. This program and the accompanying materials
 * are made available under the terms of the Eclipse Public License v2.0
 * which accompanies this distribution, and is available at
 * http://www.eclipse.org/legal/epl-v20.html
 * Contributors:
 * bahlef - initial API and implementation and/or initial documentation
 */

package de.funfried.netbeans.plugins.external.formatter.java.spring.ui;

import java.awt.event.ActionEvent;
import java.awt.event.ActionListener;
import java.util.prefs.Preferences;

import javax.swing.DefaultComboBoxModel;
import javax.swing.GroupLayout;
import javax.swing.JComboBox;
import javax.swing.JLabel;
import javax.swing.LayoutStyle;
import javax.swing.SwingConstants;

import org.apache.commons.lang3.StringUtils;
import org.openide.awt.Mnemonics;
import org.openide.util.NbBundle;

import de.funfried.netbeans.plugins.external.formatter.java.spring.SpringJavaFormatterSettings;
import de.funfried.netbeans.plugins.external.formatter.ui.options.AbstractFormatterOptionsPanel;

/**
 *
 * @author bahlef
 */
public class SpringJavaFormatterOptionsPanel extends AbstractFormatterOptionsPanel {
	/** Creates new form SpringJavaFormatterOptionsPanel. */
	public SpringJavaFormatterOptionsPanel() {
		initComponents();
	}

	/**
	 * This method is called from within the constructor to
	 * initialize the form.
	 * WARNING: Do NOT modify this code. The content of this method is
	 * always regenerated by the Form Editor.
	 */
	@SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        lblSpringLinefeed = new JLabel();
        cbLinefeed = new JComboBox<>();

        lblSpringLinefeed.setHorizontalAlignment(SwingConstants.RIGHT);
        Mnemonics.setLocalizedText(lblSpringLinefeed, NbBundle.getMessage(SpringJavaFormatterOptionsPanel.class, "SpringJavaFormatterOptionsPanel.lblSpringLinefeed.text")); // NOI18N
        lblSpringLinefeed.setToolTipText(NbBundle.getMessage(SpringJavaFormatterOptionsPanel.class, "SpringJavaFormatterOptionsPanel.lblSpringLinefeed.toolTipText")); // NOI18N

        cbLinefeed.setModel(new DefaultComboBoxModel<>(new String[] { "System", "\\n", "\\r\\n", "\\r" }));
        cbLinefeed.setToolTipText(NbBundle.getMessage(SpringJavaFormatterOptionsPanel.class, "SpringJavaFormatterOptionsPanel.cbLinefeed.toolTipText")); // NOI18N
        cbLinefeed.addActionListener(new ActionListener() {
            public void actionPerformed(ActionEvent evt) {
                cbLinefeedActionPerformed(evt);
            }
        });

        GroupLayout layout = new GroupLayout(this);
        this.setLayout(layout);
        layout.setHorizontalGroup(layout.createParallelGroup(GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addContainerGap()
                .addComponent(lblSpringLinefeed)
                .addPreferredGap(LayoutStyle.ComponentPlacement.UNRELATED)
                .addComponent(cbLinefeed, GroupLayout.PREFERRED_SIZE, 121, GroupLayout.PREFERRED_SIZE)
                .addContainerGap(GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
        );
        layout.setVerticalGroup(layout.createParallelGroup(GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(layout.createParallelGroup(GroupLayout.Alignment.BASELINE)
                    .addComponent(lblSpringLinefeed)
                    .addComponent(cbLinefeed, GroupLayout.PREFERRED_SIZE, GroupLayout.DEFAULT_SIZE, GroupLayout.PREFERRED_SIZE))
                .addContainerGap(GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
        );
    }// </editor-fold>//GEN-END:initComponents

    private void cbLinefeedActionPerformed(ActionEvent evt) {//GEN-FIRST:event_cbLinefeedActionPerformed
        fireChangedListener();
    }//GEN-LAST:event_cbLinefeedActionPerformed

    // Variables declaration - do not modify//GEN-BEGIN:variables
    private JComboBox<String> cbLinefeed;
    private JLabel lblSpringLinefeed;
    // End of variables declaration//GEN-END:variables

	private String getLinefeed() {
		if (0 == cbLinefeed.getSelectedIndex()) {
			return "";
		}
		return cbLinefeed.getSelectedItem().toString();
	}

	/**
	 * {@inheritDoc}
	 */
	@Override
	public void load(Preferences preferences) {
		String springLineFeed = preferences.get(SpringJavaFormatterSettings.LINEFEED, "");

		if (StringUtils.isBlank(springLineFeed)) {
			//default = system-dependend LF
			cbLinefeed.setSelectedIndex(0);
		} else {
			cbLinefeed.setSelectedItem(springLineFeed);
		}
	}

	/**
	 * {@inheritDoc}
	 */
	@Override
	public void setActive(boolean active) {
		cbLinefeed.setEnabled(active);
	}

	/**
	 * {@inheritDoc}
	 */
	@Override
	public void store(Preferences preferences) {
		preferences.put(SpringJavaFormatterSettings.LINEFEED, getLinefeed());
	}
}
