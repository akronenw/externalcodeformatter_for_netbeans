/*
 * Copyright (c) 2020 bahlef.
 * All rights reserved. This program and the accompanying materials
 * are made available under the terms of the Eclipse Public License v2.0
 * which accompanies this distribution, and is available at
 * http://www.eclipse.org/legal/epl-v20.html
 * Contributors:
 * markiewb - initial API and implementation and/or initial documentation
 * bahlef
 */
package de.funfried.netbeans.plugins.external.formatter.ui.customizer;

import java.awt.BorderLayout;
import java.awt.Dimension;
import java.awt.event.ActionEvent;
import java.awt.event.ActionListener;
import java.awt.event.MouseAdapter;
import java.awt.event.MouseEvent;
import java.util.ArrayList;
import java.util.Collection;
import java.util.prefs.Preferences;

import javax.swing.JCheckBox;
import javax.swing.JLabel;
import javax.swing.JPanel;
import javax.swing.JScrollPane;
import javax.swing.SwingConstants;
import javax.swing.event.ChangeListener;

import org.netbeans.api.options.OptionsDisplayer;
import org.openide.awt.Mnemonics;
import org.openide.util.NbBundle;

import de.funfried.netbeans.plugins.external.formatter.ui.options.ExternalFormatterPanel;
import de.funfried.netbeans.plugins.external.formatter.ui.options.Settings;

/**
 * {@link VerifiableConfigPanel} {@link JPanel} implementation for project specific external formatting properties panel.
 *
 * @author markiewb
 * @author bahlef
 */
@NbBundle.Messages({ "ProjectSpecificSettingsPanel.cbOverrideGlobalSettings.text=Override global settings",
		"ProjectSpecificSettingsPanel.lblJumpToGlobalOptions.text=<html><a href=\"#\">Configure global options...</a>" })
public class ProjectSpecificSettingsPanel extends JPanel implements VerifiableConfigPanel {
	/** The unique serial version ID. */
	private static final long serialVersionUID = 1L;

	/** {@link Collection} holding all registered {@link ChangeListener}s. */
	private transient final Collection<ChangeListener> changeListeners = new ArrayList<>();

	/** The project specific {@link Preferences}. */
	private transient final Preferences projectPreferences;

	/** The {@link ExternalFormatterPanel}. */
	private final ExternalFormatterPanel innerComponent;

	/**
	 * Package private constructor to create a new instance of {@link ProjectSpecificSettingsPanel}.
	 *
	 * @param innerComponent the {@link ExternalFormatterPanel}
	 * @param projectPreferences the project specific {@link Preferences}
	 */
	ProjectSpecificSettingsPanel(ExternalFormatterPanel innerComponent, Preferences projectPreferences) {
		initComponents();
		this.innerComponent = innerComponent;
		this.projectPreferences = projectPreferences;

		innerPanel.setLayout(new BorderLayout());
		innerPanel.add(this.innerComponent, BorderLayout.CENTER);
	}

	/**
	 * This method is called from within the constructor to initialize the form. WARNING: Do NOT modify this code. The content of this method is always regenerated by the Form Editor.
	 */
	@SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        scrollPane = new JScrollPane();
        scrollContainer = new JPanel();
        headerPanel = new JPanel();
        cbOverrideGlobalSettings = new JCheckBox();
        lblJumpToGlobalOptions = new JLabel();
        innerPanel = new JPanel();

        setLayout(new BorderLayout());

        scrollPane.setPreferredSize(new Dimension(100, 200));

        scrollContainer.setLayout(new BorderLayout());

        headerPanel.setLayout(new BorderLayout());

        Mnemonics.setLocalizedText(cbOverrideGlobalSettings, NbBundle.getMessage(ProjectSpecificSettingsPanel.class, "ProjectSpecificSettingsPanel.cbOverrideGlobalSettings.text")); // NOI18N
        cbOverrideGlobalSettings.addActionListener(new ActionListener() {
            public void actionPerformed(ActionEvent evt) {
                cbOverrideGlobalSettingsActionPerformed(evt);
            }
        });
        headerPanel.add(cbOverrideGlobalSettings, BorderLayout.WEST);

        lblJumpToGlobalOptions.setHorizontalAlignment(SwingConstants.RIGHT);
        Mnemonics.setLocalizedText(lblJumpToGlobalOptions, NbBundle.getMessage(ProjectSpecificSettingsPanel.class, "ProjectSpecificSettingsPanel.lblJumpToGlobalOptions.text")); // NOI18N
        lblJumpToGlobalOptions.addMouseListener(new MouseAdapter() {
            public void mouseClicked(MouseEvent evt) {
                lblJumpToGlobalOptionsMouseClicked(evt);
            }
        });
        headerPanel.add(lblJumpToGlobalOptions, BorderLayout.EAST);

        scrollContainer.add(headerPanel, BorderLayout.NORTH);
        scrollContainer.add(innerPanel, BorderLayout.CENTER);

        scrollPane.setViewportView(scrollContainer);

        add(scrollPane, BorderLayout.CENTER);
    }// </editor-fold>//GEN-END:initComponents

	private void cbOverrideGlobalSettingsActionPerformed(ActionEvent evt) {//GEN-FIRST:event_cbOverrideGlobalSettingsActionPerformed
		innerPanel.setVisible(cbOverrideGlobalSettings.isSelected());
		fireStateChanged();
	}//GEN-LAST:event_cbOverrideGlobalSettingsActionPerformed

	private void lblJumpToGlobalOptionsMouseClicked(MouseEvent evt) {//GEN-FIRST:event_lblJumpToGlobalOptionsMouseClicked
		OptionsDisplayer.getDefault().open("Editor/de.funfried.netbeans.plugins.external.formatter.ui.options");
	}//GEN-LAST:event_lblJumpToGlobalOptionsMouseClicked

    // Variables declaration - do not modify//GEN-BEGIN:variables
    private JCheckBox cbOverrideGlobalSettings;
    private JPanel headerPanel;
    private JPanel innerPanel;
    private JLabel lblJumpToGlobalOptions;
    private JPanel scrollContainer;
    private JScrollPane scrollPane;
    // End of variables declaration//GEN-END:variables

	/**
	 * {@inheritDoc}
	 */
	@Override
	public void load() {
		boolean useProjectSettings = projectPreferences.getBoolean(Settings.USE_PROJECT_SETTINGS, false);
		cbOverrideGlobalSettings.setSelected(useProjectSettings);
		innerPanel.setVisible(useProjectSettings);
	}

	/**
	 * {@inheritDoc}
	 */
	@Override
	public void store() {
		projectPreferences.putBoolean(Settings.USE_PROJECT_SETTINGS, cbOverrideGlobalSettings.isSelected());
	}

	/**
	 * Adds a {@link ChangeListener} to this {@link ProjectSpecificSettingsPanel}.
	 *
	 * @param listener the {@link ChangeListener}
	 */
	public void addChangeListener(ChangeListener listener) {
		changeListeners.add(listener);
	}

	private void fireStateChanged() {
		changeListeners.forEach((changeListener) -> {
			changeListener.stateChanged(null);
		});
	}

	/**
	 * Removes a {@link ChangeListener} to this {@link ProjectSpecificSettingsPanel}.
	 *
	 * @param listener the {@link ChangeListener}
	 */
	public void removeChangeListener(ChangeListener listener) {
		changeListeners.remove(listener);
	}

	/**
	 * {@inheritDoc}
	 */
	@Override
	public boolean valid() {
		boolean result = true;
		if (cbOverrideGlobalSettings.isSelected()) {
			return innerComponent.valid();
		}

		return result;
	}
}
