/*
 * Copyright (c) 2020 bahlef.
 * All rights reserved. This program and the accompanying materials
 * are made available under the terms of the Eclipse Public License v2.0
 * which accompanies this distribution, and is available at
 * http://www.eclipse.org/legal/epl-v20.html
 * Contributors:
 * bahlef - initial API and implementation and/or initial documentation
 */

package de.funfried.netbeans.plugins.external.formatter.css.cssparser.ui;

import java.awt.event.ActionEvent;
import java.awt.event.ActionListener;
import java.util.Objects;
import java.util.prefs.Preferences;

import javax.swing.GroupLayout;
import javax.swing.JCheckBox;
import javax.swing.JLabel;
import javax.swing.JSpinner;
import javax.swing.LayoutStyle;
import javax.swing.SpinnerNumberModel;
import javax.swing.event.ChangeEvent;
import javax.swing.event.ChangeListener;

import org.netbeans.api.project.Project;
import org.openide.awt.Mnemonics;
import org.openide.util.NbBundle;

import de.funfried.netbeans.plugins.external.formatter.css.cssparser.CssParserFormatterSettings;
import de.funfried.netbeans.plugins.external.formatter.ui.options.AbstractFormatterOptionsPanel;

/**
 *
 * @author bahlef
 */
public class CssParserFormatterOptionsPanel extends AbstractFormatterOptionsPanel {
	/**
	 * Creates new form {@link CssParserFormatterOptionsPanel}.
	 *
	 * @param project the {@link Project} if the panel is used to modify project
	 *        specific settings, otherwise {@code null}
	 */
	public CssParserFormatterOptionsPanel(Project project) {
		super(project);

		initComponents();
	}

	/**
	 * This method is called from within the constructor to
	 * initialize the form.
	 * WARNING: Do NOT modify this code. The content of this method is
	 * always regenerated by the Form Editor.
	 */
	@SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        rgbAsHexChkBox = new JCheckBox();
        useSingleQuotesChkBox = new JCheckBox();
        indentSizeLbl = new JLabel();
        indentSizeSpn = new JSpinner();
        useSourceStringValuesChkBox = new JCheckBox();

        rgbAsHexChkBox.setSelected(true);
        Mnemonics.setLocalizedText(rgbAsHexChkBox, NbBundle.getMessage(CssParserFormatterOptionsPanel.class, "CssParserFormatterOptionsPanel.rgbAsHexChkBox.text")); // NOI18N
        rgbAsHexChkBox.setToolTipText(NbBundle.getMessage(CssParserFormatterOptionsPanel.class, "CssParserFormatterOptionsPanel.rgbAsHexChkBox.toolTipText")); // NOI18N
        rgbAsHexChkBox.addActionListener(new ActionListener() {
            public void actionPerformed(ActionEvent evt) {
                rgbAsHexChkBoxActionPerformed(evt);
            }
        });

        Mnemonics.setLocalizedText(useSingleQuotesChkBox, NbBundle.getMessage(CssParserFormatterOptionsPanel.class, "CssParserFormatterOptionsPanel.useSingleQuotesChkBox.text")); // NOI18N
        useSingleQuotesChkBox.setToolTipText(NbBundle.getMessage(CssParserFormatterOptionsPanel.class, "CssParserFormatterOptionsPanel.useSingleQuotesChkBox.toolTipText")); // NOI18N
        useSingleQuotesChkBox.addActionListener(new ActionListener() {
            public void actionPerformed(ActionEvent evt) {
                useSingleQuotesChkBoxActionPerformed(evt);
            }
        });

        Mnemonics.setLocalizedText(indentSizeLbl, NbBundle.getMessage(CssParserFormatterOptionsPanel.class, "CssParserFormatterOptionsPanel.indentSizeLbl.text")); // NOI18N
        indentSizeLbl.setToolTipText(NbBundle.getMessage(CssParserFormatterOptionsPanel.class, "CssParserFormatterOptionsPanel.indentSizeLbl.toolTipText")); // NOI18N

        indentSizeSpn.setModel(new SpinnerNumberModel(4, 0, null, 1));
        indentSizeSpn.addChangeListener(new ChangeListener() {
            public void stateChanged(ChangeEvent evt) {
                indentSizeSpnStateChanged(evt);
            }
        });

        Mnemonics.setLocalizedText(useSourceStringValuesChkBox, NbBundle.getMessage(CssParserFormatterOptionsPanel.class, "CssParserFormatterOptionsPanel.useSourceStringValuesChkBox.text")); // NOI18N
        useSourceStringValuesChkBox.setToolTipText(NbBundle.getMessage(CssParserFormatterOptionsPanel.class, "CssParserFormatterOptionsPanel.useSourceStringValuesChkBox.toolTipText")); // NOI18N
        useSourceStringValuesChkBox.addActionListener(new ActionListener() {
            public void actionPerformed(ActionEvent evt) {
                useSourceStringValuesChkBoxActionPerformed(evt);
            }
        });

        GroupLayout layout = new GroupLayout(this);
        this.setLayout(layout);
        layout.setHorizontalGroup(layout.createParallelGroup(GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(layout.createParallelGroup(GroupLayout.Alignment.LEADING)
                    .addComponent(rgbAsHexChkBox)
                    .addComponent(useSingleQuotesChkBox))
                .addPreferredGap(LayoutStyle.ComponentPlacement.RELATED, GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                .addGroup(layout.createParallelGroup(GroupLayout.Alignment.LEADING)
                    .addGroup(GroupLayout.Alignment.TRAILING, layout.createSequentialGroup()
                        .addComponent(indentSizeLbl)
                        .addGap(43, 43, 43)
                        .addComponent(indentSizeSpn, GroupLayout.PREFERRED_SIZE, 84, GroupLayout.PREFERRED_SIZE))
                    .addComponent(useSourceStringValuesChkBox, GroupLayout.Alignment.TRAILING))
                .addContainerGap())
        );
        layout.setVerticalGroup(layout.createParallelGroup(GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(layout.createParallelGroup(GroupLayout.Alignment.LEADING)
                    .addGroup(layout.createSequentialGroup()
                        .addGroup(layout.createParallelGroup(GroupLayout.Alignment.BASELINE)
                            .addComponent(indentSizeLbl)
                            .addComponent(indentSizeSpn, GroupLayout.PREFERRED_SIZE, GroupLayout.DEFAULT_SIZE, GroupLayout.PREFERRED_SIZE))
                        .addPreferredGap(LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(useSourceStringValuesChkBox))
                    .addGroup(layout.createSequentialGroup()
                        .addComponent(rgbAsHexChkBox)
                        .addPreferredGap(LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(useSingleQuotesChkBox)))
                .addContainerGap(GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
        );
    }// </editor-fold>//GEN-END:initComponents

    private void rgbAsHexChkBoxActionPerformed(ActionEvent evt) {//GEN-FIRST:event_rgbAsHexChkBoxActionPerformed
		fireChangedListener();
    }//GEN-LAST:event_rgbAsHexChkBoxActionPerformed

    private void useSingleQuotesChkBoxActionPerformed(ActionEvent evt) {//GEN-FIRST:event_useSingleQuotesChkBoxActionPerformed
		fireChangedListener();
    }//GEN-LAST:event_useSingleQuotesChkBoxActionPerformed

    private void indentSizeSpnStateChanged(ChangeEvent evt) {//GEN-FIRST:event_indentSizeSpnStateChanged
		indentSizeSpn.setToolTipText(Objects.toString(indentSizeSpn.getValue(), null));

		fireChangedListener();
    }//GEN-LAST:event_indentSizeSpnStateChanged

    private void useSourceStringValuesChkBoxActionPerformed(ActionEvent evt) {//GEN-FIRST:event_useSourceStringValuesChkBoxActionPerformed
        // TODO add your handling code here:
    }//GEN-LAST:event_useSourceStringValuesChkBoxActionPerformed

    // Variables declaration - do not modify//GEN-BEGIN:variables
    private JLabel indentSizeLbl;
    private JSpinner indentSizeSpn;
    private JCheckBox rgbAsHexChkBox;
    private JCheckBox useSingleQuotesChkBox;
    private JCheckBox useSourceStringValuesChkBox;
    // End of variables declaration//GEN-END:variables

		/**
		 * {@inheritDoc}
		 */
		@Override
		public void load(Preferences preferences) {
			boolean rgbAsHex = preferences.getBoolean(CssParserFormatterSettings.RGB_AS_HEX, CssParserFormatterSettings.RGB_AS_HEX_DEFAULT);
			boolean useSingleQuotes = preferences.getBoolean(CssParserFormatterSettings.USE_SINGLE_QUOTES, CssParserFormatterSettings.USE_SINGLE_QUOTES_DEFAULT);
			boolean useSourceStringValues = preferences.getBoolean(CssParserFormatterSettings.USE_SOURCE_STRING_VALUES, CssParserFormatterSettings.USE_SOURCE_STRING_VALUES_DEFAULT);
			int indentSize = preferences.getInt(CssParserFormatterSettings.INDENT, CssParserFormatterSettings.INDENT_DEFAULT);

			rgbAsHexChkBox.setSelected(rgbAsHex);
			useSingleQuotesChkBox.setSelected(useSingleQuotes);
			useSourceStringValuesChkBox.setSelected(useSourceStringValues);
			indentSizeSpn.setValue(indentSize);
			indentSizeSpn.setToolTipText(Objects.toString(indentSizeSpn.getValue(), null));
		}

		/**
		 * {@inheritDoc}
		 */
		@Override
		public void store(Preferences preferences) {
			preferences.putBoolean(CssParserFormatterSettings.RGB_AS_HEX, rgbAsHexChkBox.isSelected());
			preferences.putBoolean(CssParserFormatterSettings.USE_SINGLE_QUOTES, useSingleQuotesChkBox.isSelected());
			preferences.putBoolean(CssParserFormatterSettings.USE_SOURCE_STRING_VALUES, useSourceStringValuesChkBox.isSelected());
			preferences.putInt(CssParserFormatterSettings.INDENT, (int) indentSizeSpn.getValue());
		}

		/**
		 * {@inheritDoc}
		 */
		@Override
		public boolean valid() {
			return true;
		}
	}
