/*
 * Copyright (c) 2022 bahlef.
 * All rights reserved. This program and the accompanying materials
 * are made available under the terms of the Eclipse Public License v2.0
 * which accompanies this distribution, and is available at
 * http://www.eclipse.org/legal/epl-v20.html
 * Contributors:
 * bahlef - initial API and implementation and/or initial documentation
 */

package de.funfried.netbeans.plugins.external.formatter.sql.sqlformatter.ui;

import java.util.prefs.Preferences;

import javax.swing.DefaultComboBoxModel;
import javax.swing.SpinnerNumberModel;

import org.netbeans.api.project.Project;

import com.github.vertical_blank.sqlformatter.languages.Dialect;

import de.funfried.netbeans.plugins.external.formatter.sql.sqlformatter.SQLFormatterSettings;
import de.funfried.netbeans.plugins.external.formatter.ui.options.AbstractFormatterOptionsPanel;

/**
 *
 * @author bahlef
 */
public class SQLFormatterOptionsPanel extends AbstractFormatterOptionsPanel {
	private static final long serialVersionUID = 1734936313207738588L;

	/**
	 * Creates new form {@link SQLFormatterOptionsPanel}.
	 *
	 * @param project the {@link Project} if the panel is used to modify project
	 *        specific settings, otherwise {@code null}
	 */
	public SQLFormatterOptionsPanel(Project project) {
		super(project);

		initComponents();
	}

	/**
	 * This method is called from within the constructor to
	 * initialize the form.
	 * WARNING: Do NOT modify this code. The content of this method is
	 * always regenerated by the Form Editor.
	 */
	@SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        spellingLbl = new javax.swing.JLabel();
        uppercaseChkBox = new javax.swing.JCheckBox();
        outputLbl = new javax.swing.JLabel();
        linesBetweenQueriesLbl = new javax.swing.JLabel();
        linesBetweenQueriesSpnr = new javax.swing.JSpinner();
        maxColumnLengthLbl = new javax.swing.JLabel();
        maxColumnLengthSpnr = new javax.swing.JSpinner();
        indentWidthLbl = new javax.swing.JLabel();
        indentWidthSpnr = new javax.swing.JSpinner();
        positioningLbl = new javax.swing.JLabel();
        expandTabsToSpacesChkBox = new javax.swing.JCheckBox();
        dialectLbl = new javax.swing.JLabel();
        dbDialectLbl = new javax.swing.JLabel();
        dbDialectCmbBox = new javax.swing.JComboBox<>();

        spellingLbl.setFont(new java.awt.Font("Helvetica Neue", 1, 13)); // NOI18N
        org.openide.awt.Mnemonics.setLocalizedText(spellingLbl, org.openide.util.NbBundle.getMessage(SQLFormatterOptionsPanel.class, "SQLFormatterOptionsPanel.spellingLbl.text")); // NOI18N

        org.openide.awt.Mnemonics.setLocalizedText(uppercaseChkBox, org.openide.util.NbBundle.getMessage(SQLFormatterOptionsPanel.class, "SQLFormatterOptionsPanel.uppercaseChkBox.text")); // NOI18N

        outputLbl.setFont(new java.awt.Font("Helvetica Neue", 1, 13)); // NOI18N
        org.openide.awt.Mnemonics.setLocalizedText(outputLbl, org.openide.util.NbBundle.getMessage(SQLFormatterOptionsPanel.class, "SQLFormatterOptionsPanel.outputLbl.text")); // NOI18N

        org.openide.awt.Mnemonics.setLocalizedText(linesBetweenQueriesLbl, org.openide.util.NbBundle.getMessage(SQLFormatterOptionsPanel.class, "SQLFormatterOptionsPanel.linesBetweenQueriesLbl.text")); // NOI18N

        linesBetweenQueriesSpnr.setModel(new SpinnerNumberModel(SQLFormatterSettings.LINES_BETWEEN_QUERIES_DEFAULT, 1, 24, 1));

        org.openide.awt.Mnemonics.setLocalizedText(maxColumnLengthLbl, org.openide.util.NbBundle.getMessage(SQLFormatterOptionsPanel.class, "SQLFormatterOptionsPanel.maxColumnLengthLbl.text")); // NOI18N

        maxColumnLengthSpnr.setModel(new SpinnerNumberModel(SQLFormatterSettings.MAX_COLUMN_LENGTH_DEFAULT, 20, 400, 1));

        org.openide.awt.Mnemonics.setLocalizedText(indentWidthLbl, org.openide.util.NbBundle.getMessage(SQLFormatterOptionsPanel.class, "SQLFormatterOptionsPanel.indentWidthLbl.text")); // NOI18N

        indentWidthSpnr.setModel(new SpinnerNumberModel(SQLFormatterSettings.INDENT_SIZE_DEFAULT, 1, 24, 1));

        positioningLbl.setFont(new java.awt.Font("Helvetica Neue", 1, 13)); // NOI18N
        org.openide.awt.Mnemonics.setLocalizedText(positioningLbl, org.openide.util.NbBundle.getMessage(SQLFormatterOptionsPanel.class, "SQLFormatterOptionsPanel.positioningLbl.text")); // NOI18N

        expandTabsToSpacesChkBox.setSelected(true);
        org.openide.awt.Mnemonics.setLocalizedText(expandTabsToSpacesChkBox, org.openide.util.NbBundle.getMessage(SQLFormatterOptionsPanel.class, "SQLFormatterOptionsPanel.expandTabsToSpacesChkBox.text")); // NOI18N

        dialectLbl.setFont(new java.awt.Font("Helvetica Neue", 1, 13)); // NOI18N
        org.openide.awt.Mnemonics.setLocalizedText(dialectLbl, org.openide.util.NbBundle.getMessage(SQLFormatterOptionsPanel.class, "SQLFormatterOptionsPanel.dialectLbl.text")); // NOI18N

        org.openide.awt.Mnemonics.setLocalizedText(dbDialectLbl, org.openide.util.NbBundle.getMessage(SQLFormatterOptionsPanel.class, "SQLFormatterOptionsPanel.dbDialectLbl.text")); // NOI18N

        dbDialectCmbBox.setModel(new DefaultComboBoxModel<Dialect>(Dialect.values()));
        dbDialectCmbBox.setSelectedItem(Dialect.StandardSql);

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(this);
        this.setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(outputLbl)
                    .addComponent(spellingLbl)
                    .addComponent(positioningLbl)
                    .addComponent(dialectLbl)
                    .addGroup(layout.createSequentialGroup()
                        .addGap(6, 6, 6)
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addGroup(layout.createSequentialGroup()
                                .addComponent(dbDialectLbl)
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                                .addComponent(dbDialectCmbBox, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                            .addGroup(layout.createSequentialGroup()
                                .addComponent(linesBetweenQueriesLbl)
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                                .addComponent(linesBetweenQueriesSpnr, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                                .addGap(18, 18, 18)
                                .addComponent(maxColumnLengthLbl)
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                                .addComponent(maxColumnLengthSpnr, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                            .addComponent(uppercaseChkBox)
                            .addGroup(layout.createSequentialGroup()
                                .addComponent(indentWidthLbl)
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                                .addComponent(indentWidthSpnr, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                                .addGap(18, 18, 18)
                                .addComponent(expandTabsToSpacesChkBox)))))
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addContainerGap()
                .addComponent(outputLbl)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(linesBetweenQueriesLbl)
                    .addComponent(linesBetweenQueriesSpnr, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(maxColumnLengthLbl)
                    .addComponent(maxColumnLengthSpnr, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addGap(18, 18, 18)
                .addComponent(spellingLbl)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addComponent(uppercaseChkBox)
                .addGap(18, 18, 18)
                .addComponent(positioningLbl)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(indentWidthLbl)
                    .addComponent(indentWidthSpnr, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(expandTabsToSpacesChkBox))
                .addGap(18, 18, 18)
                .addComponent(dialectLbl)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(dbDialectLbl)
                    .addComponent(dbDialectCmbBox, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addContainerGap(34, Short.MAX_VALUE))
        );
    }// </editor-fold>//GEN-END:initComponents

    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JComboBox<Dialect> dbDialectCmbBox;
    private javax.swing.JLabel dbDialectLbl;
    private javax.swing.JLabel dialectLbl;
    private javax.swing.JCheckBox expandTabsToSpacesChkBox;
    private javax.swing.JLabel indentWidthLbl;
    private javax.swing.JSpinner indentWidthSpnr;
    private javax.swing.JLabel linesBetweenQueriesLbl;
    private javax.swing.JSpinner linesBetweenQueriesSpnr;
    private javax.swing.JLabel maxColumnLengthLbl;
    private javax.swing.JSpinner maxColumnLengthSpnr;
    private javax.swing.JLabel outputLbl;
    private javax.swing.JLabel positioningLbl;
    private javax.swing.JLabel spellingLbl;
    private javax.swing.JCheckBox uppercaseChkBox;
    // End of variables declaration//GEN-END:variables

	/**
	 * {@inheritDoc}
	 */
	@Override
	public void load(Preferences preferences) {
		linesBetweenQueriesSpnr.setValue(preferences.getInt(SQLFormatterSettings.LINES_BETWEEN_QUERIES, SQLFormatterSettings.LINES_BETWEEN_QUERIES_DEFAULT));
		maxColumnLengthSpnr.setValue(preferences.getInt(SQLFormatterSettings.MAX_COLUMN_LENGTH, SQLFormatterSettings.MAX_COLUMN_LENGTH_DEFAULT));
		uppercaseChkBox.setSelected(preferences.getBoolean(SQLFormatterSettings.UPPERCASE, SQLFormatterSettings.UPPERCASE_DEFAULT));
		indentWidthSpnr.setValue(preferences.getInt(SQLFormatterSettings.INDENT_SIZE, SQLFormatterSettings.INDENT_SIZE_DEFAULT));
		expandTabsToSpacesChkBox.setSelected(preferences.getBoolean(SQLFormatterSettings.EXPAND_TABS_TO_SPACES, SQLFormatterSettings.EXPAND_TABS_TO_SPACES_DEFAULT));
		dbDialectCmbBox.setSelectedItem(Dialect.valueOf(preferences.get(SQLFormatterSettings.DIALECT, SQLFormatterSettings.DIALECT_DEFAULT)));
	}

	/**
	 * {@inheritDoc}
	 */
	@Override
	public void store(Preferences preferences) {
		preferences.putInt(SQLFormatterSettings.LINES_BETWEEN_QUERIES, Integer.parseInt(String.valueOf(linesBetweenQueriesSpnr.getValue())));
		preferences.putInt(SQLFormatterSettings.MAX_COLUMN_LENGTH, Integer.parseInt(String.valueOf(maxColumnLengthSpnr.getValue())));
		preferences.putBoolean(SQLFormatterSettings.UPPERCASE, uppercaseChkBox.isSelected());
		preferences.putInt(SQLFormatterSettings.INDENT_SIZE, Integer.parseInt(String.valueOf(indentWidthSpnr.getValue())));
		preferences.putBoolean(SQLFormatterSettings.EXPAND_TABS_TO_SPACES, expandTabsToSpacesChkBox.isSelected());
		preferences.put(SQLFormatterSettings.DIALECT, String.valueOf(dbDialectCmbBox.getSelectedItem()));
	}

	/**
	 * {@inheritDoc}
	 */
	@Override
	public boolean valid() {
		return true;
	}
}
