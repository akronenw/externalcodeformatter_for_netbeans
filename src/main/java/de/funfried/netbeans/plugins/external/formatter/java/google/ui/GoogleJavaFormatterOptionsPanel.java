/*
 * Copyright (c) 2020 bahlef.
 * All rights reserved. This program and the accompanying materials
 * are made available under the terms of the Eclipse Public License v2.0
 * which accompanies this distribution, and is available at
 * http://www.eclipse.org/legal/epl-v20.html
 * Contributors:
 * bahlef - initial API and implementation and/or initial documentation
 */

package de.funfried.netbeans.plugins.external.formatter.java.google.ui;

import java.awt.event.ActionEvent;
import java.awt.event.ActionListener;
import java.util.prefs.Preferences;

import javax.swing.ButtonGroup;
import javax.swing.GroupLayout;
import javax.swing.JCheckBox;
import javax.swing.JLabel;
import javax.swing.JRadioButton;
import javax.swing.LayoutStyle;

import org.netbeans.api.project.Project;
import org.openide.awt.Mnemonics;
import org.openide.util.NbBundle;

import com.google.googlejavaformat.java.JavaFormatterOptions;

import de.funfried.netbeans.plugins.external.formatter.java.google.GoogleJavaFormatterSettings;
import de.funfried.netbeans.plugins.external.formatter.ui.options.AbstractFormatterOptionsPanel;

/**
 *
 * @author bahlef
 */
public class GoogleJavaFormatterOptionsPanel extends AbstractFormatterOptionsPanel {
	/**
	 * Creates new form {@link GoogleJavaFormatterOptionsPanel}.
	 *
	 * @param project the {@link Project} if the panel is used to modify project
	 *        specific settings, otherwise {@code null}
	 */
	public GoogleJavaFormatterOptionsPanel(Project project) {
		super(project);

		initComponents();
	}

	/**
	 * This method is called from within the constructor to
	 * initialize the form.
	 * WARNING: Do NOT modify this code. The content of this method is
	 * always regenerated by the Form Editor.
	 */
	@SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        googleCodeStyleBtnGrp = new ButtonGroup();
        googleCodeStyleRdBtn = new JRadioButton();
        aospRdBtn = new JRadioButton();
        googleCodeStyleLbl = new JLabel();
        organizeImportsChkBox = new JCheckBox();
        organizeImportsAfterFixImportsChkBox = new JCheckBox();

        googleCodeStyleBtnGrp.add(googleCodeStyleRdBtn);
        googleCodeStyleRdBtn.setSelected(true);
        Mnemonics.setLocalizedText(googleCodeStyleRdBtn, NbBundle.getMessage(GoogleJavaFormatterOptionsPanel.class, "GoogleJavaFormatterOptionsPanel.googleCodeStyleRdBtn.text")); // NOI18N
        googleCodeStyleRdBtn.setToolTipText(NbBundle.getMessage(GoogleJavaFormatterOptionsPanel.class, "GoogleJavaFormatterOptionsPanel.googleCodeStyleRdBtn.toolTipText")); // NOI18N
        googleCodeStyleRdBtn.addActionListener(new ActionListener() {
            public void actionPerformed(ActionEvent evt) {
                googleCodeStyleRdBtnActionPerformed(evt);
            }
        });

        googleCodeStyleBtnGrp.add(aospRdBtn);
        Mnemonics.setLocalizedText(aospRdBtn, NbBundle.getMessage(GoogleJavaFormatterOptionsPanel.class, "GoogleJavaFormatterOptionsPanel.aospRdBtn.text")); // NOI18N
        aospRdBtn.setToolTipText(NbBundle.getMessage(GoogleJavaFormatterOptionsPanel.class, "GoogleJavaFormatterOptionsPanel.aospRdBtn.toolTipText")); // NOI18N
        aospRdBtn.addActionListener(new ActionListener() {
            public void actionPerformed(ActionEvent evt) {
                aospRdBtnActionPerformed(evt);
            }
        });

        Mnemonics.setLocalizedText(googleCodeStyleLbl, NbBundle.getMessage(GoogleJavaFormatterOptionsPanel.class, "GoogleJavaFormatterOptionsPanel.googleCodeStyleLbl.text")); // NOI18N
        googleCodeStyleLbl.setToolTipText(NbBundle.getMessage(GoogleJavaFormatterOptionsPanel.class, "GoogleJavaFormatterOptionsPanel.googleCodeStyleLbl.toolTipText")); // NOI18N

        Mnemonics.setLocalizedText(organizeImportsChkBox, NbBundle.getMessage(GoogleJavaFormatterOptionsPanel.class, "GoogleJavaFormatterOptionsPanel.organizeImportsChkBox.text")); // NOI18N
        organizeImportsChkBox.addActionListener(new ActionListener() {
            public void actionPerformed(ActionEvent evt) {
                organizeImportsChkBoxActionPerformed(evt);
            }
        });

        Mnemonics.setLocalizedText(organizeImportsAfterFixImportsChkBox, NbBundle.getMessage(GoogleJavaFormatterOptionsPanel.class, "GoogleJavaFormatterOptionsPanel.organizeImportsAfterFixImportsChkBox.text")); // NOI18N
        organizeImportsAfterFixImportsChkBox.setEnabled(false);
        organizeImportsAfterFixImportsChkBox.addActionListener(new ActionListener() {
            public void actionPerformed(ActionEvent evt) {
                organizeImportsAfterFixImportsChkBoxActionPerformed(evt);
            }
        });

        GroupLayout layout = new GroupLayout(this);
        this.setLayout(layout);
        layout.setHorizontalGroup(layout.createParallelGroup(GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(layout.createParallelGroup(GroupLayout.Alignment.LEADING)
                    .addGroup(layout.createSequentialGroup()
                        .addComponent(googleCodeStyleLbl)
                        .addPreferredGap(LayoutStyle.ComponentPlacement.UNRELATED)
                        .addComponent(googleCodeStyleRdBtn)
                        .addGap(18, 18, 18)
                        .addComponent(aospRdBtn))
                    .addComponent(organizeImportsChkBox)
                    .addGroup(layout.createSequentialGroup()
                        .addGap(21, 21, 21)
                        .addComponent(organizeImportsAfterFixImportsChkBox)))
                .addContainerGap(GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
        );
        layout.setVerticalGroup(layout.createParallelGroup(GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(layout.createParallelGroup(GroupLayout.Alignment.BASELINE)
                    .addComponent(googleCodeStyleRdBtn)
                    .addComponent(aospRdBtn)
                    .addComponent(googleCodeStyleLbl))
                .addPreferredGap(LayoutStyle.ComponentPlacement.UNRELATED)
                .addComponent(organizeImportsChkBox)
                .addPreferredGap(LayoutStyle.ComponentPlacement.UNRELATED)
                .addComponent(organizeImportsAfterFixImportsChkBox)
                .addContainerGap(GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
        );
    }// </editor-fold>//GEN-END:initComponents

    private void googleCodeStyleRdBtnActionPerformed(ActionEvent evt) {//GEN-FIRST:event_googleCodeStyleRdBtnActionPerformed
		fireChangedListener();
    }//GEN-LAST:event_googleCodeStyleRdBtnActionPerformed

    private void aospRdBtnActionPerformed(ActionEvent evt) {//GEN-FIRST:event_aospRdBtnActionPerformed
		fireChangedListener();
    }//GEN-LAST:event_aospRdBtnActionPerformed

    private void organizeImportsChkBoxActionPerformed(ActionEvent evt) {//GEN-FIRST:event_organizeImportsChkBoxActionPerformed
        fireChangedListener();
    }//GEN-LAST:event_organizeImportsChkBoxActionPerformed

    private void organizeImportsAfterFixImportsChkBoxActionPerformed(ActionEvent evt) {//GEN-FIRST:event_organizeImportsAfterFixImportsChkBoxActionPerformed
        fireChangedListener();
    }//GEN-LAST:event_organizeImportsAfterFixImportsChkBoxActionPerformed

    // Variables declaration - do not modify//GEN-BEGIN:variables
    private JRadioButton aospRdBtn;
    private ButtonGroup googleCodeStyleBtnGrp;
    private JLabel googleCodeStyleLbl;
    private JRadioButton googleCodeStyleRdBtn;
    private JCheckBox organizeImportsAfterFixImportsChkBox;
    private JCheckBox organizeImportsChkBox;
    // End of variables declaration//GEN-END:variables

		/**
		 * {@inheritDoc}
		 */
		@Override
		public void load(Preferences preferences) {
			String googleFormatterCodeStyle = preferences.get(GoogleJavaFormatterSettings.CODE_STYLE, JavaFormatterOptions.Style.GOOGLE.name());

			if (JavaFormatterOptions.Style.AOSP.name().equals(googleFormatterCodeStyle)) {
				googleCodeStyleBtnGrp.setSelected(aospRdBtn.getModel(), true);
			} else {
				googleCodeStyleBtnGrp.setSelected(googleCodeStyleRdBtn.getModel(), true);
			}

			boolean organizeImports = preferences.getBoolean(GoogleJavaFormatterSettings.ORGANIZE_IMPORTS, false);

			organizeImportsChkBox.setSelected(organizeImports);

			organizeImportsAfterFixImportsChkBox.setEnabled(organizeImports);
			if (!organizeImports) {
				organizeImportsAfterFixImportsChkBox.setSelected(false);
			} else {
				boolean organizeImportsAfterFixImports = preferences.getBoolean(GoogleJavaFormatterSettings.ORGANIZE_IMPORTS_AFTER_FIX_IMPORTS, false);

				organizeImportsAfterFixImportsChkBox.setSelected(organizeImportsAfterFixImports);
			}
		}

		/**
		 * {@inheritDoc}
		 */
		@Override
		public void store(Preferences preferences) {
			preferences.put(GoogleJavaFormatterSettings.CODE_STYLE, googleCodeStyleRdBtn.isSelected() ? JavaFormatterOptions.Style.GOOGLE.name() : JavaFormatterOptions.Style.AOSP.name());

			boolean organizeImports = organizeImportsChkBox.isSelected();
			preferences.putBoolean(GoogleJavaFormatterSettings.ORGANIZE_IMPORTS, organizeImports);
			preferences.putBoolean(GoogleJavaFormatterSettings.ORGANIZE_IMPORTS_AFTER_FIX_IMPORTS, organizeImports && organizeImportsAfterFixImportsChkBox.isSelected());
		}

		/**
		 * {@inheritDoc}
		 */
		@Override
		public boolean valid() {
			boolean organizeImports = organizeImportsChkBox.isSelected();
			organizeImportsAfterFixImportsChkBox.setEnabled(organizeImports);
			if (!organizeImports) {
				organizeImportsAfterFixImportsChkBox.setEnabled(false);
			}

			return googleCodeStyleBtnGrp.getSelection() != null;
		}
	}
