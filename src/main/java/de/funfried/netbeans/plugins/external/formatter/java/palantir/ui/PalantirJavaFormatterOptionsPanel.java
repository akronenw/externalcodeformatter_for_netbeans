/*
 * Copyright (c) 2020 bahlef.
 * All rights reserved. This program and the accompanying materials
 * are made available under the terms of the Eclipse Public License v2.0
 * which accompanies this distribution, and is available at
 * http://www.eclipse.org/legal/epl-v20.html
 * Contributors:
 * bahlef - initial API and implementation and/or initial documentation
 */

package de.funfried.netbeans.plugins.external.formatter.java.palantir.ui;

import java.awt.event.ActionEvent;
import java.awt.event.ActionListener;
import java.util.prefs.Preferences;

import javax.swing.GroupLayout;
import javax.swing.JCheckBox;
import javax.swing.LayoutStyle;

import org.netbeans.api.project.Project;
import org.openide.awt.Mnemonics;
import org.openide.util.NbBundle;

import de.funfried.netbeans.plugins.external.formatter.java.palantir.PalantirJavaFormatterSettings;
import de.funfried.netbeans.plugins.external.formatter.ui.options.AbstractFormatterOptionsPanel;

/**
 *
 * @author bahlef
 */
public class PalantirJavaFormatterOptionsPanel extends AbstractFormatterOptionsPanel {
	/**
	 * Creates new form {@link PalantirJavaFormatterOptionsPanel}.
	 *
	 * @param project the {@link Project} if the panel is used to modify project
	 *        specific settings, otherwise {@code null}
	 */
	public PalantirJavaFormatterOptionsPanel(Project project) {
		super(project);

		initComponents();
	}

	/**
	 * This method is called from within the constructor to
	 * initialize the form.
	 * WARNING: Do NOT modify this code. The content of this method is
	 * always regenerated by the Form Editor.
	 */
	@SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        organizeImportsAfterFixImportsChkBox = new JCheckBox();
        organizeImportsChkBox = new JCheckBox();

        Mnemonics.setLocalizedText(organizeImportsAfterFixImportsChkBox, NbBundle.getMessage(PalantirJavaFormatterOptionsPanel.class, "PalantirJavaFormatterOptionsPanel.organizeImportsAfterFixImportsChkBox.text")); // NOI18N
        organizeImportsAfterFixImportsChkBox.setEnabled(false);
        organizeImportsAfterFixImportsChkBox.addActionListener(new ActionListener() {
            public void actionPerformed(ActionEvent evt) {
                organizeImportsAfterFixImportsChkBoxActionPerformed(evt);
            }
        });

        Mnemonics.setLocalizedText(organizeImportsChkBox, NbBundle.getMessage(PalantirJavaFormatterOptionsPanel.class, "PalantirJavaFormatterOptionsPanel.organizeImportsChkBox.text")); // NOI18N
        organizeImportsChkBox.addActionListener(new ActionListener() {
            public void actionPerformed(ActionEvent evt) {
                organizeImportsChkBoxActionPerformed(evt);
            }
        });

        GroupLayout layout = new GroupLayout(this);
        this.setLayout(layout);
        layout.setHorizontalGroup(layout.createParallelGroup(GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(layout.createParallelGroup(GroupLayout.Alignment.LEADING)
                    .addComponent(organizeImportsChkBox)
                    .addGroup(layout.createSequentialGroup()
                        .addGap(21, 21, 21)
                        .addComponent(organizeImportsAfterFixImportsChkBox)))
                .addContainerGap(GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
        );
        layout.setVerticalGroup(layout.createParallelGroup(GroupLayout.Alignment.LEADING)
            .addGroup(GroupLayout.Alignment.TRAILING, layout.createSequentialGroup()
                .addContainerGap()
                .addComponent(organizeImportsChkBox)
                .addPreferredGap(LayoutStyle.ComponentPlacement.UNRELATED)
                .addComponent(organizeImportsAfterFixImportsChkBox)
                .addContainerGap(GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
        );
    }// </editor-fold>//GEN-END:initComponents

    private void organizeImportsAfterFixImportsChkBoxActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_organizeImportsAfterFixImportsChkBoxActionPerformed
        fireChangedListener();
    }//GEN-LAST:event_organizeImportsAfterFixImportsChkBoxActionPerformed

    private void organizeImportsChkBoxActionPerformed(ActionEvent evt) {//GEN-FIRST:event_organizeImportsChkBoxActionPerformed
        fireChangedListener();
    }//GEN-LAST:event_organizeImportsChkBoxActionPerformed

    // Variables declaration - do not modify//GEN-BEGIN:variables
    private JCheckBox organizeImportsAfterFixImportsChkBox;
    private JCheckBox organizeImportsChkBox;
    // End of variables declaration//GEN-END:variables
		/**
		 * {@inheritDoc}
		 */
		@Override
		public void load(Preferences preferences) {
			boolean organizeImports = preferences.getBoolean(PalantirJavaFormatterSettings.ORGANIZE_IMPORTS, false);

			organizeImportsChkBox.setSelected(organizeImports);

			organizeImportsAfterFixImportsChkBox.setEnabled(organizeImports);
			if (!organizeImports) {
				organizeImportsAfterFixImportsChkBox.setSelected(false);
			} else {
				boolean organizeImportsAfterFixImports = preferences.getBoolean(PalantirJavaFormatterSettings.ORGANIZE_IMPORTS_AFTER_FIX_IMPORTS, false);

				organizeImportsAfterFixImportsChkBox.setSelected(organizeImportsAfterFixImports);
			}
		}

		/**
		 * {@inheritDoc}
		 */
		@Override
		public void store(Preferences preferences) {
			boolean organizeImports = organizeImportsChkBox.isSelected();
			preferences.putBoolean(PalantirJavaFormatterSettings.ORGANIZE_IMPORTS, organizeImports);
			preferences.putBoolean(PalantirJavaFormatterSettings.ORGANIZE_IMPORTS_AFTER_FIX_IMPORTS, organizeImports && organizeImportsAfterFixImportsChkBox.isSelected());
		}

		/**
		 * {@inheritDoc}
		 */
		@Override
		public boolean valid() {
			boolean organizeImports = organizeImportsChkBox.isSelected();
			organizeImportsAfterFixImportsChkBox.setEnabled(organizeImports);
			if (!organizeImports) {
				organizeImportsAfterFixImportsChkBox.setEnabled(false);
			}

			return true;
		}
	}
